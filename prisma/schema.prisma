// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  emailVerified  Boolean
  image          String?
  role           String?
  banned         Boolean?
  banReason      String?
  banExpires     Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  Property       Property[]
  subscriptions  Subscriptions[]
  sessions       Session[]
  accounts       Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  impersonatedBy String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Property {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  price       Int
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  typeId      Int
  type        PropertyType      @relation(fields: [typeId], references: [id])
  statusId    Int
  status      PropertyStatus    @relation(fields: [statusId], references: [id])
  location    PropertyLocation?
  feature     PropertyFeature?
  images      PropertyImage[]
  contact     Contact?
  agentId     String?           // âœ… Now just a foreign key to agent
  agent       Agent?            @relation("AgentProperties", fields: [agentId], references: [id])
}

model Contact {
  id         Int      @id @default(autoincrement())
  name       String
  phone      String
  email      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int      @unique
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
}

model PropertyFeature {
  id              Int      @id @default(autoincrement())
  bedrooms        Int
  bathrooms       Int
  parkingSpots    Int
  area            Int
  hasSwimmingPool Boolean
  hasGardenYard   Boolean
  hasBalcony      Boolean
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId      Int      @unique
}

model PropertyLocation {
  id            Int      @id @default(autoincrement())
  streetAddress String
  city          String
  state         String
  zip           String
  region        String
  landmark      String
  propertyId    Int      @unique
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyType {
  id       Int        @id @default(autoincrement())
  value    String
  Property Property[]
}

model PropertyStatus {
  id       Int        @id @default(autoincrement())
  value    String
  Property Property[]
}

model SubscriptionPlan {
  id                    Int             @id @default(autoincrement())
  name                  String
  price                 Float
  propertyLimit         Int
  imagePerPropertyLimit Int
  features              String
  subscriptions         Subscriptions[]
}

model Subscriptions {
  id        Int              @id @default(autoincrement())
  paymentID String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  plan      SubscriptionPlan @relation(fields: [palnId], references: [id])
  palnId    Int
  userId    String
  user      User             @relation(fields: [userId], references: [id])
}



// New models for agents
model Agent {
  id                String             @id @default(cuid())
  firstName         String
  lastName          String
  email             String             @unique
  phone             String
  companyName       String
  title             String             @default("Real Estate Agent")
  bio               String?
  website           String?
  profileImageUrl   String?
  properties        Property[]         @relation("AgentProperties")
  languages         AgentLanguage[]
  badges            AgentBadge[]
  socialMedia       AgentSocialMedia?
  propertiesSold    Int                @default(0)
  propertiesListed  Int                @default(0)
  propertiesChecked Int                @default(0)
  yearsOfExperience Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}


model AgentLanguage {
  id        Int      @id @default(autoincrement())
  language  String
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([agentId, language])
}

model AgentBadge {
  id        Int      @id @default(autoincrement())
  name      String
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([agentId, name])
}

model AgentSocialMedia {
  id        Int      @id @default(autoincrement())
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  youtube   String?
  agentId   String   @unique
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model BlogPost {
  id                    Int       @id @default(autoincrement())
  post_author           Int?
  tags                  String?
  name                  String?
  category              String?
  post_date             DateTime?
  post_date_gmt         DateTime?
  post_content          Json?
  post_title            String
  post_excerpt          String?
  post_status           String?
  comment_status        String?
  ping_status           String?
  post_password         String?
  post_name             String
  to_ping               String?
  pinged                String?
  post_modified         DateTime?
  post_modified_gmt     DateTime?
  post_content_filtered String?
  post_parent           Int?
  guid                  String?
  menu_order            Int?
  post_type             String?
  post_mime_type        String?
  comment_count         Int?
  post_image            String?
  createdAt             DateTime? @default(now())
}


model Lead {
  id               String   @id @default(cuid())
  name             String
  email            String
  phone            String
  propertyInterest String?
  status           String   // "New", "Contacted", "Qualified", "Converted", "Lost"
  source           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("leads")
}

model Message {
  id           String   @id @default(cuid())
  sender       String
  email        String
  subject      String
  message      String   @db.Text
  propertyId   String?
  propertyName String?
  status       String   // "Unread", "Read", "Replied", "Archived"
  isStarred    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("messages")
}


